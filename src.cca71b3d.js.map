{"version":3,"sources":["js/task-01.js","js/task-02.js","js/task-03.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","amount","reject","logSuccess","logError","warn","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,GACH,IAAIC,QAASC,IAChBC,WAAW,KAAQD,EAAQF,IAAOA,KAKpCI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACZjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAE3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAGtD,OAAA,IAAIhB,QAASC,IAAaA,EAAQa,MAIvCX,EAASW,GAAgBT,QAAQY,MAAMH,GAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACpBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAkB,EAAEC,GAAAA,EAAIC,OAAAA,MACtB5B,MAAAA,EAAQoB,EAA0B,IAAK,KACpC,OAAA,IAAIlB,QAAS,CAACC,EAAS0B,KAC9BzB,WAAW,KACYmB,KAAKE,SAAW,IAG/BlB,QAAQC,IAAIR,GACZG,EAAQ,CAAEwB,GAAAA,EAAIrB,KAAMN,KAGpB6B,EAAOF,IAGZ3B,MAID8B,EAAa,EAAEH,GAAAA,EAAIrB,KAAAA,MACrBC,QAAQC,mBAAmBmB,kBAAmBrB,QAI5CyB,EAAWJ,IACfpB,QAAQyB,qCAAqCL,+BAI/CD,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKqB,GACLG,MAAMF,GAETL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKqB,GACLG,MAAMF,GAETL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,KAC/BnB,KAAKqB,GACLG,MAAMF,GAETL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKqB,GACLG,MAAMF;;AC1CT,aAJA,QAAA,oBAEA,QAAA,gBACA,QAAA,gBACA,QAAA","file":"src.cca71b3d.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => { resolve(ms) }, ms)\n    })\n};\n\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    \n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n    \n    return new Promise((resolve) => {resolve(updatedUsers)\n    })\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({id, amount}) => {\n  const delay = randomIntegerFromInterval(200, 500);\n    return new Promise ((resolve, reject) => {\n    setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n       \n        if (canProcess) {\n            console.log(delay);\n            resolve({ id, time: delay })\n        \n        } else {\n            reject(id)\n        \n        }\n    }, delay);\n    })\n};\n\nconst logSuccess = ({id, time}) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n    \n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n","import './sass/main.scss';\n\nimport './js/task-01'\nimport './js/task-02'\nimport './js/task-03'"]}